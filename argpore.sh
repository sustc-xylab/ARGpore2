#!/bin/bash
## ARGpore is designed to identify ARGs and their host populations in nanopore dataset
##Author: Yu XIA 2020-06-11
##Email: shuixia100@gmail.com
##version 2.0
set -e

#### usage info ####
show_help() {
cat << EOF
version 2.0
arguments:
	-h	display this help 

	-f 	1D.fasta generated by nanopore sequncing as input for argpore

	-s	similarity cutoff [0-1] for filtering ARG lastal results
		default similarity cutoff is 0.7

	-l	alignment length cutoff [0-1] for filtering ARG lastal results
		default alignment length cutoff is 0.9

	-t 	number of threads used for lastal, default t=1


output files:
	input_arg.tab	ARG quntification (copy per cell)
	input_arg.w.taxa.tab	ARGs-containing nanopore reads with taxonomy assignment and plausible plasmid identification
	input_taxa.tab	taxonomy assignment of all nanopore reads
	input_plasmid.like.tab	plasible plasmids identified in all nanopore reads
	input_circular.tab	circular nanopore reads

Example usage: bash argpore.sh -f test.fa -t 20
EOF
}

####################
# define arguments
####################
OPTIND=1  # Reset in case getopts has been used previously in the shell.

# initialize your own variables:
N_threads="1"
Input_fa=""
Lencuoff="0.9"
Simcutoff="70"
Output=$Input_fa
nowt=`date +%Y-%m-%d.%H:%M:%S`;
# nowt="2018-05-17.08:52:33"
# the DIR of argpore scirpt
# DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# echo $DIR
SCRIPT=`realpath $0`
DIR=`dirname $SCRIPT`

while getopts "t:f:l:s:o:h" opt; do
	case "$opt" in
		h|--help)
			show_help
			exit 0
			;;
		t)
			N_threads=$OPTARG
			;;
		f)
			Input_fa=$OPTARG
			;;
		l)
			Lencuoff=$OPTARG
			;;
		s)
			Simcutoff=`echo "$OPTARG*100"|bc`
			;;
		o)
			Output=$OPTARG
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 0
			;;
		'?')
			show_help >&2
			exit 1
			;;
		-?*)
			print 'Warning: Unknown option (ignored) : %s\n' "$1" >&2
			exit 0
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
		*) # default case: if no more options then break out of the loop
			break
			
	esac
done

if [ -z "$Input_fa" ]
then
	echo "No input fasta, -f must be specified"
	exit
fi
if [ -z "$Output" ]
then
	Output=$Input_fa
fi
if [ -z "$Simcutoff" ]
then
	Simcutoff="70"
fi
if [ -z "$Lencuoff" ]
then
	Lencuoff="0.9"
fi
if [ -z "$N_threads" ]
then
	N_threads=1
fi
shift "$((OPTIND-1))"
# echo $Input_fa $Simcutoff $Lencuoff $N_threads $Output $DIR $nowt

# subset the name of the $Input_fa
# $Input_fa : including input.fa path while $Input_fa2 only contain name
myarray=(`echo $Input_fa| tr "/" " "`) 
Input_fa2=${myarray[-1]}

echo "----------------------------------------------------------------------
start ARGpore @ `date +"%Y-%m-%d %T"`"

echo "ARGpore2.0 is runing using parameters:
--------------------------------------------------------------------
Input contigs: $Input_fa
Similarity cutoff for ARG identification: $Simcutoff
Alignment length cutoff for ARG identification: $Lencuoff
Similarity cutoff for Plasmid identification: 80 (default value, not user defined)
Alignment length cutoff for Plasmid identification: 0.7 (default value, not user defined)
Number of threads: $N_threads
---------------------------------------------------------------------
"

#####################################################################
####### LAST against the SARG-nt
#####################################################################
Query="${Input_fa2}"
out=${Query}_sarg

if [ ! -d $out ]; then
        mkdir $out;
else
        echo "Warning: $out already exists. previous results are overwrited"
		rm -rf $out
		mkdir -p $out
fi


echo "
searching $Query agaisnt SARG-nt with similarity cutoff $Simcutoff and alignment length cutoff $Lencuoff using $N_threads threads"


${DIR}/bin/last-983/src/lastal -s 2 -T 0 -Q 0 -a 1 -P $N_threads -f BlastTab ${DIR}/database/SARG_20170328_5020.ffn $Query > /tmp/argpore_${nowt}_${Query}_tmp.blast

echo "parsing SARG-nt last alignment"
grep -v "#" /tmp/argpore_${nowt}_${Query}_tmp.blast > /tmp/argpore_${nowt}_${Query}_tmp.blast.modified

ruby ${DIR}/bin/BlastTab.addlen.rb -s -f ${DIR}/database/SARG_20170328_5020.ffn < /tmp/argpore_${nowt}_${Query}_tmp.blast.modified > /tmp/argpore_${nowt}_${Query}_tmp.blast2

ruby ${DIR}/bin/BlastTab.addlen.rb -f $Query < /tmp/argpore_${nowt}_${Query}_tmp.blast2 > ${out}/${Query}_sarg.last


###############################################################
####### taxonomy annotation of combined.fa by KRAKEN,taxator-tk and MetaPhlan 2 markergene
###############################################################
echo "
----------------------------------------------------------------------------
Start taxonomy annotatin @ `date +"%Y-%m-%d %T"`"

Query="${Input_fa2}"
bash $DIR/bin/taxator-tk_kraken.sh $Query $N_threads $DIR $Simcutoff $Lencuoff


echo "
Finish taxonomy annotation @ `date +"%Y-%m-%d %T"`"


#########################################################
###### putative plasmid identification 
#########################################################
echo "-----------------------------------------------------------------------
Start Plasmid identification @ `date +"%Y-%m-%d %T"`
"
Query="${Input_fa2}.orfs.faa"
bash ${DIR}/bin/plasmid.identification.sh ${Input_fa2} ${DIR} $N_threads $Query 
echo "
Finish Plasmid identification @ `date +"%Y-%m-%d %T"`"

#########################################################
#######identify circular contigs 
#########################################################
echo "
Finding circular contig " 
$DIR/bin/julia-1.4.2/bin/julia $DIR/bin/ccontigs/ccontigs.jl -i ${Input_fa2} -o ${Input_fa2}_circular.tab

########################################################## 
########## summary in nanopore.summary.R
##########################################################

echo "Summarizing results in R @ `date +"%Y-%m-%d %T"`"
Query=$Input_fa2
out1=${Query}_sarg

Rscript ${DIR}/bin/argpore.R ${out1}/${Query}_sarg.last $DIR/database/structure.RData ${Query}_taxa.tab $Simcutoff $Lencuoff ${Query}_plasmid.like ${Query}_arg.w.taxa.tab


echo "
-----------------------------------------------------------------
Saving ARGpore results 
"
out=`echo "${Input_fa}_ARGpore2_${nowt}"`
echo "moving results to $out"
if [ ! -d $out ]; then 
	mkdir $out;
else 
	rm -rf $out
	mkdir -f $out

fi

mv ${Input_fa2} ${out}
mv ${Input_fa2}_sarg ${out}
mv ${Input_fa2}_marker ${out}
mv ${Input_fa2}_KRAKEN ${out}
mv ${Input_fa2}_taxator-tk ${out}
mv ${Input_fa2}_Plasmid ${out}
mv ${Input_fa2}_circular.contig.tsv ${out}
mv ${Input_fa2}_arg.w.taxa.tab ${out}
mv ${Input_fa2}_plasmid.like ${out}
mv ${Input_fa2}_taxa.tab ${out}

echo "
done ARGpore @ `date +"%Y-%m-%d %T"`
--------------------------------------------------------------------
"

